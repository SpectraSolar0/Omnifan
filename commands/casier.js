const fs = require("fs"); // <- Import manquant
const {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
} = require("discord.js");

module.exports = {
  name: "casier",
  description: "Affiche et g√®re les casiers judiciaires des membres.",
  async execute(message, args, client) {
    const dataPath = "./casiers.json";

    // üîß Initialise le fichier si il n'existe pas
    if (!fs.existsSync(dataPath)) fs.writeFileSync(dataPath, "{}");
    const casiersData = JSON.parse(fs.readFileSync(dataPath, "utf8"));

    // üßç Liste fixe des pr√©noms
    const membres = [
      "Mr Diego",
      "Mr L√©o F.",
      "Mr Fromage",
      "Mlle L√©o L.",
      "Mr Afraaz",
      "Mr Joachim",
      "Mr Miniburger",
      "Mr Gabriel",
      "Mr Adam",
      "Mr Estaban",
      "Mr Martin",
      "Mr Antoine",
      "Mlle Maryne",
      "Mr Alhumam",
      "Mr Cyprien",
      "Mr Justin",
      "Mr Noa",
      "Mr Aldo",
    ];

    // === √âtape 1 : Menu principal ===
    const row = new ActionRowBuilder();
    membres.forEach((nom) => {
      row.addComponents(
        new ButtonBuilder()
          .setCustomId(`personne_${nom}`)
          .setLabel(nom)
          .setStyle(ButtonStyle.Primary)
      );
    });

    const embedMenu = new EmbedBuilder()
      .setTitle("üìÅ Menu des casiers judiciaires")
      .setDescription(
        "Choisis une personne pour consulter ou modifier ses casiers :"
      )
      .setColor(0x5865f2);

    let menuMessage;
    try {
      menuMessage = await message.channel.send({
        embeds: [embedMenu],
        components: [row],
      });
    } catch (err) {
      console.error("Erreur lors de l'envoi du menu principal :", err);
      return;
    }

    const collector = menuMessage.createMessageComponentCollector({
      time: 300000, // 5 minutes
    });

    collector.on("collect", async (interaction) => {
      if (!interaction.isButton()) return;
      const id = interaction.customId;

      // === √âtape 2 : Afficher les casiers d'une personne ===
      if (id.startsWith("personne_")) {
        const nom = id.replace("personne_", "");
        const casiers = casiersData[nom] || [];

        const casierRow = new ActionRowBuilder();

        // Boutons de casiers existants
        if (casiers.length > 0) {
          casiers.forEach((c) => {
            casierRow.addComponents(
              new ButtonBuilder()
                .setCustomId(`casier_${nom}_${c.id}`)
                .setLabel(`Casier ${c.id}`)
                .setStyle(ButtonStyle.Secondary)
            );
          });
        }

        // ‚ûï Bouton pour ajouter un casier
        casierRow.addComponents(
          new ButtonBuilder()
            .setCustomId(`add_${nom}`)
            .setLabel("‚ûï Ajouter un casier")
            .setStyle(ButtonStyle.Success)
        );

        const embedPerso = new EmbedBuilder()
          .setTitle(`üìÇ Casiers de ${nom}`)
          .setColor(0xf1c40f)
          .setDescription(
            casiers.length > 0
              ? "Choisis un casier √† consulter ou ajoute-en un nouveau."
              : "‚ùå Aucun casier pour cette personne.\nTu peux en ajouter un avec le bouton ci-dessous."
          );

        try {
          await interaction.update({
            embeds: [embedPerso],
            components: [casierRow],
          });
        } catch (err) {
          console.warn(
            "‚ö†Ô∏è Impossible de modifier le message pour afficher les casiers (message supprim√© ou expir√©)."
          );
        }
      }

      // === √âtape 3 : Ajouter un casier ===
      if (id.startsWith("add_")) {
        const nom = id.replace("add_", "");
        const filter = (m) => m.author.id === message.author.id;

        const ask = async (question) => {
          try {
            await interaction.followUp({ content: question, ephemeral: true });
            const collected = await message.channel.awaitMessages({
              filter,
              max: 1,
              time: 60000,
              errors: ["time"],
            });
            return collected.first().content;
          } catch (err) {
            return null;
          }
        };

        try {
          const date = await ask("üìÖ Date du casier (ex: 08/10/2025) :");
          if (!date) throw new Error("Temps √©coul√©");
          const infractions = await ask("üö® Infractions :");
          const details = await ask("üìù D√©tails :");
          const sanction = await ask("‚õìÔ∏è Sanction :");
          const moderateur = await ask("üõ°Ô∏è Mod√©rateur :");
          const note = await ask("üìå Note mod√©ration :");
          const recurrence = await ask("‚ö†Ô∏è Texte de r√©cidive / surveillance :");

          if (!casiersData[nom]) casiersData[nom] = [];

          const newCasier = {
            id: casiersData[nom].length + 1,
            date,
            infractions,
            details,
            sanction,
            moderateur,
            note,
            recurrence,
          };

          casiersData[nom].push(newCasier);
          fs.writeFileSync(dataPath, JSON.stringify(casiersData, null, 2));

          await interaction.followUp({
            content: `‚úÖ Casier ajout√© pour **${nom}** (Casier n¬∞${newCasier.id}) !`,
            ephemeral: true,
          });
        } catch (err) {
          await interaction.followUp({
            content: "‚ùå Temps √©coul√© ou erreur, ajout annul√©.",
            ephemeral: true,
          });
        }
      }

      // === √âtape 4 : Afficher un casier ===
      if (id.startsWith("casier_")) {
        const [, nom, casierId] = id.split("_");
        const casier = casiersData[nom]?.find((c) => c.id == casierId);
        if (!casier)
          return interaction.reply({
            content: "‚ùå Casier introuvable.",
            ephemeral: true,
          });

        const embedCasier = new EmbedBuilder()
          .setTitle(`üìÇ Casier judiciaire ‚Äì ${nom}`)
          .setColor(0xd63031)
          .setDescription(
            `**üî£ Casier n¬∞${casier.id}**\n` +
              `üìÖ **Date** : ${casier.date}\n` +
              `üö® **Infractions** : ${casier.infractions}\n\n` +
              `üìù **D√©tails** : ${casier.details}\n` +
              `‚õìÔ∏è **Sanction** : ${casier.sanction}\n` +
              `üõ°Ô∏è **Mod√©rateur** : ${casier.moderateur}\n\n` +
              `üìå **Note mod√©ration** : ${casier.note}\n\n` +
              `> ${casier.recurrence}`
          );

        const rowDelete = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId(`delete_${nom}_${casier.id}`)
            .setLabel("üóëÔ∏è Supprimer ce casier")
            .setStyle(ButtonStyle.Danger)
        );

        try {
          await interaction.update({
            embeds: [embedCasier],
            components: [rowDelete],
          });
        } catch (err) {
          console.warn(
            "‚ö†Ô∏è Impossible de modifier le message pour afficher le casier (message supprim√© ou expir√©)."
          );
        }
      }

      // === √âtape 5 : Supprimer un casier ===
      if (id.startsWith("delete_")) {
        const [, nom, casierId] = id.split("_");

        if (!casiersData[nom])
          return interaction.reply({
            content: "‚ùå Aucun casier trouv√© pour cette personne.",
            ephemeral: true,
          });

        casiersData[nom] = casiersData[nom].filter((c) => c.id != casierId);
        fs.writeFileSync(dataPath, JSON.stringify(casiersData, null, 2));

        const embedDeleted = new EmbedBuilder()
          .setTitle(`üóëÔ∏è Casier supprim√©`)
          .setDescription(`Le casier n¬∞${casierId} de **${nom}** a √©t√© supprim√©.`)
          .setColor(0xe74c3c);

        try {
          await interaction.update({
            embeds: [embedDeleted],
            components: [],
          });
        } catch (err) {
          console.warn(
            "‚ö†Ô∏è Impossible de modifier le message pour supprimer le casier (message supprim√© ou expir√©)."
          );
        }
      }
    });

    collector.on("end", async () => {
      try {
        await menuMessage.edit({ components: [] });
      } catch (err) {
        console.warn("‚ö†Ô∏è Message introuvable √† la fin du collector.");
      }
    });
  },
};
