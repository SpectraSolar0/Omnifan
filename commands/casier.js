const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require("discord.js");
const { getCasiers } = require("../jsonbin"); // Import JSONBin helper

module.exports = {
  name: "casier",
  description: "Affiche les casiers judiciaires des membres.",
  async execute(message) {
    const membres = [
      "Mr Diego",
      "Mr L√©o F.",
      "Mr Fromage",
      "Mlle L√©o L.",
      "Mr Afraaz",
      "Mr Joachim",
      "Mr Miniburger",
      "Mr Gabriel",
      "Mr Adam",
      "Mr Estaban",
      "Mr Martin",
      "Mr Antoine",
      "Mlle Maryne",
      "Mr Alhumam",
      "Mr Cyprien",
      "Mr Justin",
      "Mr Noa",
      "Mr Aldo",
    ];

    // R√©cup√®re les casiers depuis JSONBin
    const casiersData = await getCasiers();

    // Menu principal
    const rows = [];
    const boutonsParLigne = 5;
    for (let i = 0; i < membres.length; i += boutonsParLigne) {
      const row = new ActionRowBuilder();
      membres.slice(i, i + boutonsParLigne).forEach((nom) => {
        row.addComponents(
          new ButtonBuilder()
            .setCustomId(`personne_${nom}`)
            .setLabel(nom)
            .setStyle(ButtonStyle.Primary)
        );
      });
      rows.push(row);
    }

    const embedMenu = new EmbedBuilder()
      .setTitle("üìÅ Menu des casiers judiciaires")
      .setDescription("Choisis une personne pour consulter ses casiers :")
      .setColor(0x5865f2);

    let menuMessage;
    try {
      menuMessage = await message.channel.send({
        embeds: [embedMenu],
        components: rows,
      });
    } catch (err) {
      console.error("Erreur en envoyant le menu :", err);
      return;
    }

    const collector = menuMessage.createMessageComponentCollector({ time: 300000 });

    collector.on("collect", async (interaction) => {
      if (!interaction.isButton()) return;
      const id = interaction.customId;

      // Bouton retour
      if (id === "retour") {
        try {
          await interaction.update({ embeds: [embedMenu], components: rows });
        } catch {}
        return;
      }

      // S√©lection d'une personne
      if (id.startsWith("personne_")) {
        const nom = id.replace("personne_", "");
        const casiers = casiersData[nom] || [];

        const casierRows = [];
        if (casiers.length > 0) {
          const row = new ActionRowBuilder();
          casiers.forEach((c) => {
            row.addComponents(
              new ButtonBuilder()
                .setCustomId(`casier_${nom}_${c.id}`)
                .setLabel(`Casier ${c.id}`)
                .setStyle(ButtonStyle.Secondary)
            );
          });
          casierRows.push(row);
        }

        // Bouton retour
        const retourRow = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("retour")
            .setLabel("‚Ü©Ô∏è Retour")
            .setStyle(ButtonStyle.Secondary)
        );

        const embedPerso = new EmbedBuilder()
          .setTitle(`üìÇ Casiers de ${nom}`)
          .setColor(0xf1c40f)
          .setDescription(
            casiers.length > 0
              ? "Clique sur un casier pour voir ses d√©tails."
              : "‚ùå Aucun casier pour cette personne."
          );

        try {
          await interaction.update({
            embeds: [embedPerso],
            components: [...casierRows, retourRow],
          });
        } catch {}
      }

      // Affichage d‚Äôun casier
      if (id.startsWith("casier_")) {
        const [, nom, casierId] = id.split("_");
        const casier = casiersData[nom]?.find((c) => c.id == casierId);
        if (!casier)
          return interaction.reply({
            content: "‚ùå Casier introuvable.",
            ephemeral: true,
          });

        const embedCasier = new EmbedBuilder()
          .setTitle(`üìÇ Casier judiciaire ‚Äì ${nom}`)
          .setColor(0xd63031)
          .setDescription(
            `**üî£ Casier n¬∞${casier.id}**\n` +
              `üìÖ **Date** : ${casier.date}\n` +
              `üö® **Infractions** : ${casier.infractions}\n\n` +
              `üìù **D√©tails** : ${casier.details}\n` +
              `‚õìÔ∏è **Sanction** : ${casier.sanction}\n` +
              `üõ°Ô∏è **Mod√©rateur** : ${casier.moderateur}\n\n` +
              `üìå **Note mod√©ration** : ${casier.note}\n\n` +
              `> ${casier.recurrence}`
          );

        // Bouton retour
        const retourRow = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("retour")
            .setLabel("‚Ü©Ô∏è Retour")
            .setStyle(ButtonStyle.Secondary)
        );

        try {
          await interaction.update({
            embeds: [embedCasier],
            components: [retourRow],
          });
        } catch {}
      }
    });

    collector.on("end", async () => {
      try {
        await menuMessage.edit({ components: [] });
      } catch {}
    });
  },
};
