const {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  PermissionsBitField,
  EmbedBuilder
} = require('discord.js');

module.exports = {
  name: 'shield',
  description: 'Active ou d√©sactive les permissions pour parler avec un message de pr√©vention en embed.',
  adminOnly: true
  async execute(message) {
    // V√©rifie les permissions du bot
    if (!message.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
      return message.reply("‚ùå Je n‚Äôai pas la permission de g√©rer les r√¥les !");
    }

    // Demande l‚ÄôID du salon d‚Äôannonce
    await message.reply("üõ°Ô∏è Envoie maintenant **l‚ÄôID du salon** o√π je dois envoyer le message de pr√©vention du shield :");

    const filter = m => m.author.id === message.author.id;
    const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });

    if (!collected.size) return message.reply("‚è∞ Temps √©coul√©, commande annul√©e.");

    const channelId = collected.first().content.trim();
    const targetChannel = message.guild.channels.cache.get(channelId);

    if (!targetChannel) {
      return message.reply("‚ùå ID de salon invalide. Commande annul√©e.");
    }

    // Cr√©e les boutons
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('shield_on')
        .setLabel('üü¢ Activer')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('shield_off')
        .setLabel('üî¥ D√©sactiver')
        .setStyle(ButtonStyle.Danger)
    );

    // Envoie les boutons
    const sent = await message.reply({
      content: `Choisis une action pour le **Shield** :`,
      components: [row]
    });

    // Collecteur d‚Äôinteractions
    const collector = sent.createMessageComponentCollector({
      filter: i => i.user.id === message.author.id,
      time: 30000
    });

    collector.on('collect', async interaction => {
      const everyoneRole = message.guild.roles.everyone;

      if (interaction.customId === 'shield_on') {
        // üîí SHIELD ACTIV√â
        for (const channel of message.guild.channels.cache.values()) {
          if (channel.isTextBased()) {
            await channel.permissionOverwrites.edit(everyoneRole, { SendMessages: false }).catch(() => {});
          }
        }

        const embedOn = new EmbedBuilder()
          .setTitle("üõ°Ô∏è SHIELD ACTIV√â")
          .setDescription(
            "Le mode **Shield** vient d‚Äô√™tre **activ√©**.\n\n" +
            "üîí Les permissions d‚Äôenvoi de messages ont √©t√© **bloqu√©es** pour tout le monde.\n" +
            "‚ö†Ô∏è Ce mode prot√®ge le serveur contre le spam ou les attaques.\n\n" +
            "üëâ Un mod√©rateur pourra le d√©sactiver avec la commande `!shield`."
          )
          .setColor(0xff0000)
          .setThumbnail("https://cdn-icons-png.flaticon.com/512/1048/1048945.png")
          .setFooter({ text: `Serveur : ${message.guild.name}`, iconURL: message.guild.iconURL() })
          .setTimestamp();

        await targetChannel.send({ embeds: [embedOn] });
        await interaction.reply({ content: "‚úÖ Shield **activ√©** avec succ√®s !", ephemeral: true });

      } else if (interaction.customId === 'shield_off') {
        // üîì SHIELD D√âSACTIV√â
        for (const channel of message.guild.channels.cache.values()) {
          if (channel.isTextBased()) {
            await channel.permissionOverwrites.edit(everyoneRole, { SendMessages: true }).catch(() => {});
          }
        }

        const embedOff = new EmbedBuilder()
          .setTitle("üîì SHIELD D√âSACTIV√â")
          .setDescription(
            "Le mode **Shield** vient d‚Äô√™tre **d√©sactiv√©**.\n\n" +
            "‚úÖ Les permissions d‚Äôenvoi de messages sont de nouveau **autoris√©es**.\n" +
            "üí¨ Les membres peuvent maintenant parler librement dans les salons.\n\n" +
            "‚öôÔ∏è Restez vigilants, nous relancerons le shield si besoin."
          )
          .setColor(0x00ff00)
          .setThumbnail("https://cdn-icons-png.flaticon.com/512/992/992700.png")
          .setFooter({ text: `Serveur : ${message.guild.name}`, iconURL: message.guild.iconURL() })
          .setTimestamp();

        await targetChannel.send({ embeds: [embedOff] });
        await interaction.reply({ content: "‚úÖ Shield **d√©sactiv√©** avec succ√®s !", ephemeral: true });
      }

      // D√©sactivation des boutons
      row.components.forEach(button => button.setDisabled(true));
      await sent.edit({ components: [row] });
      collector.stop();
    });

    collector.on('end', collected => {
      if (collected.size === 0) {
        row.components.forEach(button => button.setDisabled(true));
        sent.edit({ content: "‚è∞ Temps √©coul√©, aucune action choisie.", components: [row] });
      }
    });
  }
};
