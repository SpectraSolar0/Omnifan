const { ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionsBitField } = require('discord.js');

module.exports = {
  name: 'shield',
  description: 'Active ou d√©sactive les permissions pour parler avec un message de pr√©vention.',
  async execute(message) {
    // V√©rifie si l‚Äôutilisateur est admin
    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return message.reply("‚ùå Tu n‚Äôas pas la permission d‚Äôutiliser cette commande.");
    }

    // V√©rifie les permissions du bot
    if (!message.guild.members.me.permissions.has(PermissionsBitField.Flags.ManageRoles)) {
      return message.reply("‚ùå Je n‚Äôai pas la permission de g√©rer les r√¥les !");
    }

    // Demande l‚ÄôID du salon o√π envoyer le message d‚Äôalerte
    await message.reply("üõ°Ô∏è Envoie maintenant **l‚ÄôID du salon** o√π je dois envoyer le message de pr√©vention du shield :");

    const filter = m => m.author.id === message.author.id;
    const collected = await message.channel.awaitMessages({ filter, max: 1, time: 30000 });

    if (!collected.size) return message.reply("‚è∞ Temps √©coul√©, commande annul√©e.");

    const channelId = collected.first().content.trim();
    const targetChannel = message.guild.channels.cache.get(channelId);

    if (!targetChannel) {
      return message.reply("‚ùå ID de salon invalide. Commande annul√©e.");
    }

    // Cr√©e les boutons
    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('shield_on')
        .setLabel('üü¢ Activer')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('shield_off')
        .setLabel('üî¥ D√©sactiver')
        .setStyle(ButtonStyle.Danger)
    );

    // Envoie les boutons
    const sent = await message.reply({
      content: `Choisis une action pour le **Shield** :`,
      components: [row]
    });

    // Attend une interaction
    const collector = sent.createMessageComponentCollector({
      filter: i => i.user.id === message.author.id,
      time: 30000
    });

    collector.on('collect', async interaction => {
      const everyoneRole = message.guild.roles.everyone;

      if (interaction.customId === 'shield_on') {
        // D√©sactive la permission d‚Äô√©crire
        for (const channel of message.guild.channels.cache.values()) {
          if (channel.isTextBased()) {
            await channel.permissionOverwrites.edit(everyoneRole, { SendMessages: false }).catch(() => {});
          }
        }

        await targetChannel.send("üõ°Ô∏è **ALERTE SHIELD ACTIV√â !**\nLes permissions d‚Äôenvoi de messages ont √©t√© temporairement bloqu√©es pour tout le monde.");
        await interaction.reply({ content: "‚úÖ Shield **activ√©** avec succ√®s !", ephemeral: true });

      } else if (interaction.customId === 'shield_off') {
        // R√©active la permission d‚Äô√©crire
        for (const channel of message.guild.channels.cache.values()) {
          if (channel.isTextBased()) {
            await channel.permissionOverwrites.edit(everyoneRole, { SendMessages: true }).catch(() => {});
          }
        }

        await targetChannel.send("üîì **Shield d√©sactiv√©.** Tout le monde peut √† nouveau parler.");
        await interaction.reply({ content: "‚úÖ Shield **d√©sactiv√©** avec succ√®s !", ephemeral: true });
      }

      // D√©sactive les boutons apr√®s clic
      row.components.forEach(button => button.setDisabled(true));
      await sent.edit({ components: [row] });
      collector.stop();
    });

    collector.on('end', collected => {
      if (collected.size === 0) {
        row.components.forEach(button => button.setDisabled(true));
        sent.edit({ content: "‚è∞ Temps √©coul√©, aucune action choisie.", components: [row] });
      }
    });
  }
};
